{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategory","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","response","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","console","log","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAKaA,EAAc,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,YAAiB,EAGNC,mBAAS,cAHH,mBAGnCC,EAHmC,KAGvBC,EAHuB,KAwB1C,OACI,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAY,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACpCN,EAAc,OAQd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SAxBa,SAACP,GAGtBF,EAAcE,EAAEQ,OAAOF,YCTlBG,EAAc,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAEhC,OACI,yBAAKC,UAAU,+CACX,yBACIC,IAAKF,EACLG,IAAKJ,IAET,2BAAIA,K,uBCPHK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbN,EAFa,iDAEmCO,UAAUF,GAF7C,+DAGIG,MAAMR,GAHV,cAGbS,EAHa,gBAIEA,EAASC,OAJX,uBAIZC,EAJY,EAIZA,KAGDC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QAXvB,kBAeZY,GAfY,4CAAH,sDCCPM,EAAU,SAAC,GAAgB,IAAfb,EAAc,EAAdA,SAAc,ECGX,SAACA,GAAc,IAAD,EAGZpB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAS,IALyB,mBAG/BC,EAH+B,KAGxBC,EAHwB,KAsBtC,OAdAC,qBAAU,WAENlB,EAAQC,GACHkB,MAAK,SAAAC,GACFH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAMtB,CAACd,IAEGe,EDvBwBK,CAAapB,GAAhCW,EAFuB,EAE5BL,KAAaQ,EAFe,EAEfA,QAMpB,OAJAO,QAAQC,IAAIR,GAOR,oCACI,wBAAIlB,UAAU,qCAAqCI,GAClDc,GAAW,uBAAGlB,UAAU,oCAAb,WACZ,yBAAKA,UAAU,aAEPe,EAAOH,KAAI,SAAAC,GAAG,OACV,kBAAC,EAAD,eACIc,IAAKd,EAAIC,IACLD,UEnBnBe,EAAe,WAAO,IAAD,EAEI5C,mBAAS,CAAC,qBAFd,mBAEvB6C,EAFuB,KAEX9C,EAFW,KAgB9B,OACI,oCACI,2CACA,kBAAC,EAAD,CAAaA,YAAaA,IAC1B,6BAGA,4BAEQ8C,EAAWjB,KAAK,SAAAR,GAAQ,OACpB,kBAAC,EAAD,CACAuB,IAAKvB,EACLA,SAAUA,UC3BlC0B,IAASC,OAEP,kBAAC,EAAD,MAEAC,SAASC,eAAe,U","file":"static/js/main.ca123fac.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\n//Este componente solo nos ayuda a crear nuevas categorias\n\nexport const AddCategory = ({setCategory}) => {\n\n\n    const [inputValue, setinputValue] = useState('Hola mundo');\n\n    const handleInputCange = (e) => {\n        \n\n        setinputValue(e.target.value);\n    }\n\n\n    //Prevenimos el refresh del navegador\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if(inputValue.trim().length > 2){\n            setCategory(cats => [inputValue, ...cats]);\n            setinputValue(''); //esto es para no hacer una doble inserción, borra lo que el usuario ya escribio\n        }\n\n        \n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type='text' \n                value={inputValue}\n                onChange={ handleInputCange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategory: PropTypes.func.isRequired\n}\n","import React from 'react'\n\n//Este comonente solo crea las cracteristicas de cada gif\n\nexport const GifGridItem = ({title, url}) => {\n\n    return (\n        <div className='card animate__animated animate__fadeInRight'>\n            <img \n                src={url}\n                alt={title}\n            />\n            <p>{title}</p>\n        </div>\n    )\n}\n","\n\n//Esto es un helper, o una funcion que puede ser llamada en el componente que se requiera\n//En este caso realiza la peticion y retorna los gifs como una promesa que tratamos en useFetchGifs\n\nexport const getGifs = async(category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=Ciyl70tjCZXUd1qZ2WffqFetXRmXaKuJ`;\n    const response = await fetch(url); \n    const {data} = await response.json();\n\n    //Ordenamos las propiedades en un nuevo objeto\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n\n}","import React from 'react';\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\n//Este componente recopila todos los items para mostrarlos\n\nexport const GifGrid = ({category}) => {\n\n    const {data:images, loading} = useFetchGifs(category);\n\n    console.log(loading);\n    \n    \n    \n    return (\n        //Como ya estamos retornando 2 objetos(h3, div) , usamos fragment\n        //! ES IMPORTANTE USAR CLASSNAME PARA DEFINIR LAS CLASES    \n        <>\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n            <div className='card-grid'>\n                {\n                    images.map(img => (\n                        <GifGridItem \n                            key={img.id}\n                            {...img}  //esto hace que las propiedades sean independientes\n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\n//NO ES UN COMPONENTE\n//es un custom Hook \n//Como tal, un hook es una funcion, en este caso, la funcion retorna los gifs y puede ser llamada\n//en el componente en el que se requiera (aquí es en GifGrid)\n\nexport const useFetchGifs = (category) => {\n\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n\n        getGifs(category)\n            .then(imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n            })\n\n\n\n    }, [category])\n\n    return state;\n\n}  ","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n//Este el el \"componente general\", podriamos verlo como el resultado de juntar todos los componentes, es la APP\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategory] = useState(['Sword Art Online']);\n\n    /*\n    //Esto indica a React que el estado cambio y debe renderizar todo de nuevo\n    const handleadd = () => {\n        //Extraemos las categorias que ya teniamos y despues añadimos una nueva categoria\n        // setCategory([...categories, 'Hola 3 xd']); \n\n        //Recuerda que el callback es el estado anterior y después de la funcion de flecha sera el nuevo estado\n        setCategory(cats => [...cats, 'Hola 3 xd']);\n    }\n    */\n\n\n    return (\n        <>\n            <h2>GIfEpertApp</h2>\n            <AddCategory setCategory={setCategory} />\n            <hr />\n\n\n            <ol>\n                {\n                    categories.map( category => (\n                        <GifGrid \n                        key={category}\n                        category={category} \n                        />\n                    \n                    ))\n                }          \n            </ol>\n\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\n\n\nReactDOM.render(\n  \n  <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}